#!/bin/bash
 
#####################################################
# Author: Daniel Mills
#
# Labor Logger
#
# This utility handles the logging of
# an employee's 'at-terminal' hours.
#
#####################################################

# Prints synopsis of CLI options and arguments.
usage() 
{
	echo -e "\nUSAGE: llog [<option>]\
             \n[-s || --start] [-q || --quit ] \
             \n[-e || --end  ] [-b || --break] \n"
}

# Removes line in "./ENVVARS" file corresponding to "key" and 
# then appends a new key-value pair in the form "key='value'".
set_envvars() 
{
	# Removes line in "./ENVVARS" file matching patter "$key".
	#   "$key" will be the name of the ENVVAR.
	sed -i "/$1/d" ENVVARS
	
	# Appends new key-value pair to ENVVARS file.
	echo "$1=\"$2\"" >> ENVVARS

    # Reads environment variables from "./ENVVARS" file.
    source ENVVARS
}


# Functions for command-line argument behaviors.
clock_in() 
{
	# Case 1 - Initial clock-in. 
	# Message is displayed confirming clock-in at time.
	# "13:39 - Clocked in."
    if [[ "$IS_WORKING" = false && "$TAKING_BREAK" = false ]] ; then

        # Greetings message.
        echo -e "$USERNAME clocked in."

        # Appends "11:41 - Clocked in." to this pay period's log. 
        if [ -f "$LABOR_LOG_FILE" ] ; then
            echo -e "\n------ $(date +"%A %p, %B %d") ------"  >> $LABOR_LOG_FILE
            echo  "$(date +"%b %d %R") - Clocked in." >> $LABOR_LOG_FILE
            
            set_envvars "IS_WORKING" "true"
            set_envvars "CLOCKED_IN" $(date +"%s")
            set_envvars "BREAK_LENGTH" "0"

            echo -e "Clocked in at $(date +"%I:%M %p.")\n"

        # If no log file exists (you aren't in a pay period).
	    else 
		    echo -e "No log file exists yet."
	  
            # Ask user if they want to enter a new pay period.
            echo -n "Enter new pay-period, create log file and clock-in? [Y/N]  "
            
            # The 'echo ""' line prevents bash from advancing line for prompt.
            read -r enter_new_period
            echo ""

            if [[ "$enter_new_period" = y || "$enter_new_period" = Y ]] ; then
                # Calls start_period method and writes a clock-in status to log.
                start_period
                echo -e "\n------ $(date +"%A %p, %B %d") ------" >> $LABOR_LOG_FILE
                echo "$(date +"%b %d %R") - Clocked in." >> $LABOR_LOG_FILE
                
                set_envvars "IS_WORKING" "true"
                set_envvars "CLOCKED_IN" $(date +"%s")
                set_envvars "BREAK_LENGTH" "0"
            fi
	    fi	
		
    # Case 2 - Returning from break.
    # Message is displayed to user informing of status. 
    elif [[ "$IS_WORKING" = true && "$TAKING_BREAK" = true ]] ; then
            
        set_envvars "TAKING_BREAK" "false"
        
        # Calculates length of break to be set below in ENVVAR.
        declare -i break_length
        declare -i break_end_time
        declare -i break_start_time=$BREAK_STARTED

        break_end_time=$(date +"%s")
        break_length=$(($break_end_time - $break_start_time))
        
        set_envvars "BREAK_LENGTH" $((break_length + BREAK_LENGTH))

        # Write to log "##:## - Returned from ##-minute break." 
        echo -e "\nReturned from $(($break_length / 60))-minute break.\n"
        echo "$(date +"%b %d %R") - Returned from $(($break_length / 60))-minute break." >> $LABOR_LOG_FILE
            
    # Case 3 - Already locked in, not taking break.
    # Does nothing but echo a message to user. 
    elif [[ "$IS_WORKING" = true && "$TAKING_BREAK" = false ]] ; then
        echo -e "\nAlready clocked in. \n"
    # Case 4 - Not clocked in, but taking a break.
    # This should be impossible.
    else 
        echo "Something went wrong. This should be unreachable."
    fi
}


clock_out() 
{
	if [[ "$IS_WORKING" = true && "$TAKING_BREAK" = false ]] ; then
        # Updating environment variables.
		set_envvars "IS_WORKING" "false"
		set_envvars "CLOCKED_OUT" "$(date +"%s")"

		# Calculates length of work session.
		# Stores hours, minutes, and seconds in variables.
		declare -i session_hrs
		declare -i session_sec
		declare -i session_min
		
		session_hrs=$(( ( CLOCKED_OUT - CLOCKED_IN - BREAK_LENGTH ) / 3600 ))
		session_sec=$(( ( CLOCKED_OUT - CLOCKED_IN - BREAK_LENGTH ) % 3600 ))
		session_min=$((   session_sec / 60 ))
		
        # Reports shift info to user.
		echo -e "\nYou worked $session_hrs hrs and $session_min minutes."
		echo -e "\nClocked out at $(date +"%R")." 
		
		# Appends time locked out to log file.
		echo -e "$(date +"%b %d %R") - Clocked out.\n" >> $LABOR_LOG_FILE	
		
		# Prompt for message to write 
		append_message="Y"
		count=0
	    echo "Tasks worked on:" >> $LABOR_LOG_FILE
		while [[ $append_message = "Y" || $append_message = "y" ]]
		do
			echo -e "\nWhat task(s) did you work on today?"
			read -r task_message
			echo "-- $task_message" >> $LABOR_LOG_FILE

			echo -e "\nLog another task? [Y/N]  "
			read -r append_message 
		done 

		# Appends time worked to log file.
		echo -e "\nTime Worked = $session_hrs:$(printf "%02d" $session_min)\n" >> $LABOR_LOG_FILE
	
	# User isn't allowed to clock out while on break.
	elif [[ "$IS_WORKING" = true && "$TAKING_BREAK" = true ]] ; then 
		echo -e "\nEnd your break before you clock out!\n"
	# User isn't able to to clock out if not already clocked in.
	else
		echo -e "\nYou can't clock out if you're not even working\n"
	fi	  

}

take_break() 
{
	# Standard use case.
	# User must be working and not taking a break to take one. 
	if [[ "$IS_WORKING" = true && "$TAKING_BREAK" = false ]] ; then	
		echo -e "$(date +"%b %d %R") - Started break." >> $LABOR_LOG_FILE
		echo -e "\nStarted break at $(date +"%R")\n"
		
		set_envvars "TAKING_BREAK" "true"
		set_envvars "BREAK_STARTED" "$(date +"%s")"

	# User not allowed to take breaks within breaks. 
	elif [[ "$IS_WORKING" = true && "$TAKING_BREAK" = true ]] ; then
		echo -e "\nYou're already taking a break!\n"
	else
		echo -e "\nYou can't take a break if you're not already working!\n"
	fi
}

end_period() 
{
	if [[ "$IS_WORKING" = false && "$TAKING_BREAK" = false ]] ; then
		declare -i line_hour
		declare -i line_mins
		declare -i period_hour=0
		declare -i period_mins=0
		
		# Calculate total period hours worked by summing session hours' fields.
		while read line 
		do
			if [[ $line == *"Time Worked"* ]] ; then 
				line_hour=$(echo $line | cut -f2 -d'=' | cut -f1 -d':' | 
                            sed 's/  */ /g')
				line_mins=$(echo $line | cut -f2 -d'=' | cut -f2 -d':' | 
                            sed 's/  */ /g' | sed 's/^0*//')

				(( period_hour += line_hour ))
				(( period_mins += line_mins ))
			fi
		done < $LABOR_LOG_FILE	  
	
		# Variables are adjusted since period_mins can be > 60.	
		(( period_hour += (period_mins / 60) ))
		(( period_mins  = (period_mins % 60) ))

		# Replaces empty field for total hours with total period hours.
		sed -i "s/^Total Time.*$/Total Time: $period_hour:$(printf "%02d" $period_mins)/g" $LABOR_LOG_FILE

	elif [ "$IS_WORKING" = true ] ; then
		echo -e "\nClock out before you end pay period!\n"	
	else
		echo -e "\nSomething went wrong. This should be unreachable.\n"	
	fi
}


start_period() 
{
	# Sets PERIOD_START_DATE to current date in format yyyy-mm-dd.
	set_envvars "PERIOD_START_DATE" $(date +"%Y-%m-%d")
	
	# Sets PERIOD_END_DATE to 15 if DOM is less than 15. 
    # Otherwise, PERIOD_END_DATE is the last day of the month. 
	if [ "$(date +"%d")" -lt 15 ] ; then 
		value="$(date +"%Y-%m-15")"
	else
		if [ $(date +"%m") = 4  ] || \
		   [ $(date +"%m") = 6  ] || \
		   [ $(date +"%m") = 9  ] || \
		   [ $(date +"%m") = 11 ]
		then 
	 		# 30 day months.
	   	    value="$(date +"%Y-%m-30")"

		elif [ "$(date +"%m")" = 2 ] ; then
			# February
			value="$(date +"%Y-%m-28")"

		else
			# 31 day months.
			value="$(date +"%Y-%m-31")"

		fi
	fi
    
	set_envvars "PERIOD_END_DATE" $value
	
	# Sets LABOR_LOG_FILE ENVVAR
	value="$(dirname $0)/$(date +"%b_%d")-$(echo $PERIOD_END_DATE | cut -f3 -d'-').log"
	set_envvars "LABOR_LOG_FILE" $value

	touch $LABOR_LOG_FILE

	# Print header of new log file. Blank spaces are filled in at end of pay period.
	echo -e "User: $USERNAME"                               >> "$LABOR_LOG_FILE"
	echo -e "Period: $PERIOD_START_DATE - $PERIOD_END_DATE" >> "$LABOR_LOG_FILE"
	echo -e "Total Time: "                                  >> "$LABOR_LOG_FILE"
}

# Loads environment variables from "./ENVVARS".
source ENVVARS

# Checks that only one argument given.
if [ x"$2" != x"" ]; then
	echo -e "Error: Only one argument allowed."
	usage
	exit 1
fi

case $1 in
	-s|--start)
		clock_in
		;;
	-q|--quit)
		clock_out
		;;
	-b|--break)
		take_break
		;;
	-e|--end)
		end_period
		;;
	-n|--new)
		start_period
 		;;
    *)
		usage
esac
